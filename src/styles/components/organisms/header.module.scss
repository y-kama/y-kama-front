// *========*========*========*========*========*
// Component Style
// html { font-size: 8px }
// *========*========*========*========*========*

// Base Style
$header-style: (
  backgroundColor: #163216,
  minWidth: 320px,
);
$header__inner-style: (
  display: grid,
  gridTemplateColumns: repeat(10, 32px),
  gridTemplateRows: 64px max-content,
  marginLeft: auto,
  marginRight: auto,
  width: 320px,
);
$header__inner__h1-style: (
  gridColumnEnd: 9,
  gridColumnStart: 1,
  gridRowEnd: 2,
  gridRowStart: 1,
);
$header__inner__button-style: (
  gridColumnEnd: 11,
  gridColumnStart: 9,
  gridRowEnd: 2,
  gridRowStart: 1,
);

// PC Style
$pc-style: (
  minWidth: 1152px,
);
$pc-header-style: (
  left: 0,
  position: sticky,
  right: 0,
  top: 0,
  zIndex: 9999,
);
$pc-header__inner-style: (
  gridTemplateColumns: repeat(36, 32px),
  gridTemplateRows: 64px,
  width: 1152px,
);
$pc-header__inner__h1-style: (
  gridColumnEnd: 7,
  gridColumnStart: 1,
  gridRowEnd: 2,
  gridRowStart: 1,
);
$pc-header__inner__button-style: (
  gridColumnEnd: 13,
  gridColumnStart: 7,
  gridRowEnd: 2,
  gridRowStart: 1,
);
$pc-header__inner__nav-style: (
  display: grid,
  gridColumnEnd: 37,
  gridColumnStart: 13,
  gridRowEnd: 2,
  gridRowStart: 1,
  gridTemplateColumns: repeat(24, 32px),
  gridTemplateRows: 64px,
);
$pc-header__inner__nav__ul-style: (
  display: grid,
  gridColumnEnd: 37,
  gridColumnStart: 1,
  gridRowEnd: 2,
  gridRowStart: 1,
  gridTemplateColumns: repeat(24, 32px),
  gridTemplateRows: 64px,
);
$pc-header__inner__nav__ul__li-style: (
  1: (
    gridColumnEnd: 7,
    gridColumnStart: 1,
    gridRowEnd: 2,
    gridRowStart: 1,
  ),
  2: (
    gridColumnEnd: 13,
    gridColumnStart: 7,
    gridRowEnd: 2,
    gridRowStart: 1,
  ),
  3: (
    gridColumnEnd: 19,
    gridColumnStart: 13,
    gridRowEnd: 2,
    gridRowStart: 1,
  ),
  4: (
    gridColumnEnd: 25,
    gridColumnStart: 19,
    gridRowEnd: 2,
    gridRowStart: 1,
  ),
);

// キー名の確認
@function hasKey($mapName, $keyName) {
  @if map-has-key($mapName, $keyName) {
    @return map-get($mapName, $keyName);
  }
  @else {
    @error "マップに" + $keyName + "が存在しない";
  }
};

.header {
  background-color: hasKey($header-style, "backgroundColor");
  min-width: hasKey($header-style, "minWidth");

  &__inner {
    display: hasKey($header__inner-style, "display");
    grid-template-columns: hasKey($header__inner-style, "gridTemplateColumns");
    grid-template-rows: hasKey($header__inner-style, "gridTemplateRows");
    margin-left: hasKey($header__inner-style, "marginLeft");
    margin-right: hasKey($header__inner-style, "marginRight");
    width: hasKey($header__inner-style, "width");

    & > h1 {
      grid-column-end: hasKey($header__inner__h1-style, "gridColumnEnd");
      grid-column-start: hasKey($header__inner__h1-style, "gridColumnStart");
      grid-row-end: hasKey($header__inner__h1-style, "gridRowEnd");
      grid-row-start: hasKey($header__inner__h1-style, "gridRowStart");
    }

    & > button {
      grid-column-end: hasKey($header__inner__button-style, "gridColumnEnd");
      grid-column-start: hasKey($header__inner__button-style, "gridColumnStart");
      grid-row-end: hasKey($header__inner__button-style, "gridRowEnd");
      grid-row-start: hasKey($header__inner__button-style, "gridRowStart");
    }
  }
}

@media screen and (min-width: hasKey($pc-style, "minWidth")) {
  .header {
    left: hasKey($pc-header-style, "left");
    position: hasKey($pc-header-style, "position");
    right: hasKey($pc-header-style, "right");
    top: hasKey($pc-header-style, "top");
    z-index: hasKey($pc-header-style, "zIndex");

    &__inner {
      grid-template-columns: hasKey($pc-header__inner-style, "gridTemplateColumns");
      grid-template-rows: hasKey($pc-header__inner-style, "gridTemplateRows");
      width: hasKey($pc-header__inner-style, "width");

      & > h1 {
        grid-column-end: hasKey($pc-header__inner__h1-style, "gridColumnEnd");
        grid-column-start: hasKey($pc-header__inner__h1-style, "gridColumnStart");
        grid-row-end: hasKey($pc-header__inner__h1-style, "gridRowEnd");
        grid-row-start: hasKey($pc-header__inner__h1-style, "gridRowStart");
      }

      & > button {
        grid-column-end: hasKey($pc-header__inner__button-style, "gridColumnEnd");
        grid-column-start: hasKey($pc-header__inner__button-style, "gridColumnStart");
        grid-row-end: hasKey($pc-header__inner__button-style, "gridRowEnd");
        grid-row-start: hasKey($pc-header__inner__button-style, "gridRowStart");
      }

      & > nav {
        display: hasKey($pc-header__inner__nav-style, "display");
        grid-column-end: hasKey($pc-header__inner__nav-style, "gridColumnEnd");
        grid-column-start: hasKey($pc-header__inner__nav-style, "gridColumnStart");
        grid-row-end: hasKey($pc-header__inner__nav-style, "gridRowEnd");
        grid-row-start: hasKey($pc-header__inner__nav-style, "gridRowStart");
        grid-template-columns: hasKey($pc-header__inner__nav-style, "gridTemplateColumns");
        grid-template-rows: hasKey($pc-header__inner__nav-style, "gridTemplateRows");

        & > ul {
          display: hasKey($pc-header__inner__nav__ul-style, "display");
          grid-column-end: hasKey($pc-header__inner__nav__ul-style, "gridColumnEnd");
          grid-column-start: hasKey($pc-header__inner__nav__ul-style, "gridColumnStart");
          grid-row-end: hasKey($pc-header__inner__nav__ul-style, "gridRowEnd");
          grid-row-start: hasKey($pc-header__inner__nav__ul-style, "gridRowStart");
          grid-template-columns: hasKey($pc-header__inner__nav__ul-style, "gridTemplateColumns");
          grid-template-rows: hasKey($pc-header__inner__nav__ul-style, "gridTemplateRows");

          @each $no, $property in $pc-header__inner__nav__ul__li-style {
            & > li:nth-of-type(#{$no}) {
              grid-column-end: hasKey($property, "gridColumnEnd");
              grid-column-start: hasKey($property, "gridColumnStart");
              grid-row-end: hasKey($property, "gridRowEnd");
              grid-row-start: hasKey($property, "gridRowStart");
            }
          }
        }
      }
    }
  }
}